{"version":3,"sources":["webpack:///component---src-pages-index-js-00341ec55165cd6877a0.js","webpack:///./~/create-react-class/factory.js","webpack:///./~/immutable/dist/immutable.js","webpack:///./~/object-assign/index.js","webpack:///./src/pages/index.js","webpack:///./wallets.json"],"names":["webpackJsonp","96","module","exports","__webpack_require__","identity","fn","factory","ReactComponent","isValidElement","ReactNoopUpdateQueue","validateMethodOverride","isAlreadyDefined","name","specPolicy","ReactClassInterface","hasOwnProperty","ReactClassMixin","_invariant","mixSpecIntoComponent","Constructor","spec","proto","prototype","autoBindPairs","__reactAutoBindPairs","MIXINS_KEY","RESERVED_SPEC_KEYS","mixins","property","isReactClassMethod","isFunction","shouldAutoBind","autobind","push","createMergedResultFunction","createChainedFunction","mixStaticSpecIntoComponent","statics","isReserved","ReactClassStaticInterface","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","a","apply","this","arguments","b","c","bindAutoBindMethod","component","method","boundMethod","bind","bindAutoBindMethods","pairs","i","length","autoBindKey","createClass","props","context","updater","refs","emptyObject","state","initialState","getInitialState","Array","isArray","displayName","ReactClassComponent","constructor","injectedMixins","forEach","IsMountedPreMixin","IsMountedPostMixin","getDefaultProps","defaultProps","render","methodName","propTypes","contextTypes","childContextTypes","getChildContext","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","getDerivedStateFromProps","_assign","__isMounted","replaceState","newState","callback","enqueueReplaceState","isMounted","ReactPropTypeLocationNames","313","global","ctor","superClass","Object","create","Iterable","value","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","arr","offset","len","Math","max","newArr","ii","ensureSize","iter","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","type","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","call","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","object","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","TypeError","maybeIndexedSeqFromValue","seqIterate","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","map","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","get","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","obj","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","set","isExtensible","defineProperty","enumerable","configurable","writable","nodeType","node","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","root","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","d","e","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","m","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable","4","shouldUseNative","assign","test1","getOwnPropertyNames","test2","fromCharCode","order2","n","test3","split","letter","err","propIsEnumerable","target","source","symbols","200","_interopRequireDefault","__esModule","default","_extends","_react","_react2","_Wallets","code","_Wallets2","_wallets","_wallets2","_immutable","_immutable2","config","basedir","configFile","IndexPage","createElement","style","height","padding","paddingTop","320","Zerocoin","parent","walletSrc","baseBinary","mainnetPort","mainRpcPort","testnetPort","testnetRpcPort","requiredTokens","bdbVersion","symbol","masternode","proofType","images","Dash","PIVX","Sparks","Goacoin","Omega","Saros","Shekel","Northern","Vantaur","Artax","Tokugawa","Peercoin","Novacoin","Bitcoin"],"mappings":"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","file":"component---src-pages-index-js-00341ec55165cd6877a0.js","sourcesContent":["webpackJsonp([35783957827783],{\n\n/***/ 96:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t */\n\t\n\t'use strict';\n\t\n\tvar _assign = __webpack_require__(4);\n\t\n\tvar emptyObject = __webpack_require__(34);\n\tvar _invariant = __webpack_require__(1);\n\t\n\tif (false) {\n\t  var warning = require('fbjs/lib/warning');\n\t}\n\t\n\tvar MIXINS_KEY = 'mixins';\n\t\n\t// Helper function to allow the creation of anonymous functions which do not\n\t// have .name set to the name of the variable being assigned to.\n\tfunction identity(fn) {\n\t  return fn;\n\t}\n\t\n\tvar ReactPropTypeLocationNames;\n\tif (false) {\n\t  ReactPropTypeLocationNames = {\n\t    prop: 'prop',\n\t    context: 'context',\n\t    childContext: 'child context'\n\t  };\n\t} else {\n\t  ReactPropTypeLocationNames = {};\n\t}\n\t\n\tfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n\t  /**\n\t   * Policies that describe methods in `ReactClassInterface`.\n\t   */\n\t\n\t  var injectedMixins = [];\n\t\n\t  /**\n\t   * Composite components are higher-level components that compose other composite\n\t   * or host components.\n\t   *\n\t   * To create a new type of `ReactClass`, pass a specification of\n\t   * your new class to `React.createClass`. The only requirement of your class\n\t   * specification is that you implement a `render` method.\n\t   *\n\t   *   var MyComponent = React.createClass({\n\t   *     render: function() {\n\t   *       return <div>Hello World</div>;\n\t   *     }\n\t   *   });\n\t   *\n\t   * The class specification supports a specific protocol of methods that have\n\t   * special meaning (e.g. `render`). See `ReactClassInterface` for\n\t   * more the comprehensive protocol. Any other properties and methods in the\n\t   * class specification will be available on the prototype.\n\t   *\n\t   * @interface ReactClassInterface\n\t   * @internal\n\t   */\n\t  var ReactClassInterface = {\n\t    /**\n\t     * An array of Mixin objects to include when defining your component.\n\t     *\n\t     * @type {array}\n\t     * @optional\n\t     */\n\t    mixins: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * An object containing properties and methods that should be defined on\n\t     * the component's constructor instead of its prototype (static methods).\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    statics: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of prop types for this component.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    propTypes: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of context types for this component.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    contextTypes: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Definition of context types this component sets for its children.\n\t     *\n\t     * @type {object}\n\t     * @optional\n\t     */\n\t    childContextTypes: 'DEFINE_MANY',\n\t\n\t    // ==== Definition methods ====\n\t\n\t    /**\n\t     * Invoked when the component is mounted. Values in the mapping will be set on\n\t     * `this.props` if that prop is not specified (i.e. using an `in` check).\n\t     *\n\t     * This method is invoked before `getInitialState` and therefore cannot rely\n\t     * on `this.state` or use `this.setState`.\n\t     *\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getDefaultProps: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * Invoked once before the component is mounted. The return value will be used\n\t     * as the initial value of `this.state`.\n\t     *\n\t     *   getInitialState: function() {\n\t     *     return {\n\t     *       isOn: false,\n\t     *       fooBaz: new BazFoo()\n\t     *     }\n\t     *   }\n\t     *\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getInitialState: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * @return {object}\n\t     * @optional\n\t     */\n\t    getChildContext: 'DEFINE_MANY_MERGED',\n\t\n\t    /**\n\t     * Uses props from `this.props` and state from `this.state` to render the\n\t     * structure of the component.\n\t     *\n\t     * No guarantees are made about when or how often this method is invoked, so\n\t     * it must not have side effects.\n\t     *\n\t     *   render: function() {\n\t     *     var name = this.props.name;\n\t     *     return <div>Hello, {name}!</div>;\n\t     *   }\n\t     *\n\t     * @return {ReactComponent}\n\t     * @required\n\t     */\n\t    render: 'DEFINE_ONCE',\n\t\n\t    // ==== Delegate methods ====\n\t\n\t    /**\n\t     * Invoked when the component is initially created and about to be mounted.\n\t     * This may have side effects, but any external subscriptions or data created\n\t     * by this method must be cleaned up in `componentWillUnmount`.\n\t     *\n\t     * @optional\n\t     */\n\t    componentWillMount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component has been mounted and has a DOM representation.\n\t     * However, there is no guarantee that the DOM node is in the document.\n\t     *\n\t     * Use this as an opportunity to operate on the DOM when the component has\n\t     * been mounted (initialized and rendered) for the first time.\n\t     *\n\t     * @param {DOMElement} rootNode DOM element representing the component.\n\t     * @optional\n\t     */\n\t    componentDidMount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked before the component receives new props.\n\t     *\n\t     * Use this as an opportunity to react to a prop transition by updating the\n\t     * state using `this.setState`. Current props are accessed via `this.props`.\n\t     *\n\t     *   componentWillReceiveProps: function(nextProps, nextContext) {\n\t     *     this.setState({\n\t     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n\t     *     });\n\t     *   }\n\t     *\n\t     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n\t     * transition may cause a state change, but the opposite is not true. If you\n\t     * need it, you are probably looking for `componentWillUpdate`.\n\t     *\n\t     * @param {object} nextProps\n\t     * @optional\n\t     */\n\t    componentWillReceiveProps: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked while deciding if the component should be updated as a result of\n\t     * receiving new props, state and/or context.\n\t     *\n\t     * Use this as an opportunity to `return false` when you're certain that the\n\t     * transition to the new props/state/context will not require a component\n\t     * update.\n\t     *\n\t     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n\t     *     return !equal(nextProps, this.props) ||\n\t     *       !equal(nextState, this.state) ||\n\t     *       !equal(nextContext, this.context);\n\t     *   }\n\t     *\n\t     * @param {object} nextProps\n\t     * @param {?object} nextState\n\t     * @param {?object} nextContext\n\t     * @return {boolean} True if the component should update.\n\t     * @optional\n\t     */\n\t    shouldComponentUpdate: 'DEFINE_ONCE',\n\t\n\t    /**\n\t     * Invoked when the component is about to update due to a transition from\n\t     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n\t     * and `nextContext`.\n\t     *\n\t     * Use this as an opportunity to perform preparation before an update occurs.\n\t     *\n\t     * NOTE: You **cannot** use `this.setState()` in this method.\n\t     *\n\t     * @param {object} nextProps\n\t     * @param {?object} nextState\n\t     * @param {?object} nextContext\n\t     * @param {ReactReconcileTransaction} transaction\n\t     * @optional\n\t     */\n\t    componentWillUpdate: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component's DOM representation has been updated.\n\t     *\n\t     * Use this as an opportunity to operate on the DOM when the component has\n\t     * been updated.\n\t     *\n\t     * @param {object} prevProps\n\t     * @param {?object} prevState\n\t     * @param {?object} prevContext\n\t     * @param {DOMElement} rootNode DOM element representing the component.\n\t     * @optional\n\t     */\n\t    componentDidUpdate: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Invoked when the component is about to be removed from its parent and have\n\t     * its DOM representation destroyed.\n\t     *\n\t     * Use this as an opportunity to deallocate any external resources.\n\t     *\n\t     * NOTE: There is no `componentDidUnmount` since your component will have been\n\t     * destroyed by that point.\n\t     *\n\t     * @optional\n\t     */\n\t    componentWillUnmount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Replacement for (deprecated) `componentWillMount`.\n\t     *\n\t     * @optional\n\t     */\n\t    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Replacement for (deprecated) `componentWillReceiveProps`.\n\t     *\n\t     * @optional\n\t     */\n\t    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\t\n\t    /**\n\t     * Replacement for (deprecated) `componentWillUpdate`.\n\t     *\n\t     * @optional\n\t     */\n\t    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\t\n\t    // ==== Advanced methods ====\n\t\n\t    /**\n\t     * Updates the component's currently mounted DOM representation.\n\t     *\n\t     * By default, this implements React's rendering and reconciliation algorithm.\n\t     * Sophisticated clients may wish to override this.\n\t     *\n\t     * @param {ReactReconcileTransaction} transaction\n\t     * @internal\n\t     * @overridable\n\t     */\n\t    updateComponent: 'OVERRIDE_BASE'\n\t  };\n\t\n\t  /**\n\t   * Similar to ReactClassInterface but for static methods.\n\t   */\n\t  var ReactClassStaticInterface = {\n\t    /**\n\t     * This method is invoked after a component is instantiated and when it\n\t     * receives new props. Return an object to update state in response to\n\t     * prop changes. Return null to indicate no change to state.\n\t     *\n\t     * If an object is returned, its keys will be merged into the existing state.\n\t     *\n\t     * @return {object || null}\n\t     * @optional\n\t     */\n\t    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n\t  };\n\t\n\t  /**\n\t   * Mapping from class specification keys to special processing functions.\n\t   *\n\t   * Although these are declared like instance properties in the specification\n\t   * when defining classes using `React.createClass`, they are actually static\n\t   * and are accessible on the constructor instead of the prototype. Despite\n\t   * being static, they must be defined outside of the \"statics\" key under\n\t   * which all other static methods are defined.\n\t   */\n\t  var RESERVED_SPEC_KEYS = {\n\t    displayName: function(Constructor, displayName) {\n\t      Constructor.displayName = displayName;\n\t    },\n\t    mixins: function(Constructor, mixins) {\n\t      if (mixins) {\n\t        for (var i = 0; i < mixins.length; i++) {\n\t          mixSpecIntoComponent(Constructor, mixins[i]);\n\t        }\n\t      }\n\t    },\n\t    childContextTypes: function(Constructor, childContextTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, childContextTypes, 'childContext');\n\t      }\n\t      Constructor.childContextTypes = _assign(\n\t        {},\n\t        Constructor.childContextTypes,\n\t        childContextTypes\n\t      );\n\t    },\n\t    contextTypes: function(Constructor, contextTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, contextTypes, 'context');\n\t      }\n\t      Constructor.contextTypes = _assign(\n\t        {},\n\t        Constructor.contextTypes,\n\t        contextTypes\n\t      );\n\t    },\n\t    /**\n\t     * Special case getDefaultProps which should move into statics but requires\n\t     * automatic merging.\n\t     */\n\t    getDefaultProps: function(Constructor, getDefaultProps) {\n\t      if (Constructor.getDefaultProps) {\n\t        Constructor.getDefaultProps = createMergedResultFunction(\n\t          Constructor.getDefaultProps,\n\t          getDefaultProps\n\t        );\n\t      } else {\n\t        Constructor.getDefaultProps = getDefaultProps;\n\t      }\n\t    },\n\t    propTypes: function(Constructor, propTypes) {\n\t      if (false) {\n\t        validateTypeDef(Constructor, propTypes, 'prop');\n\t      }\n\t      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n\t    },\n\t    statics: function(Constructor, statics) {\n\t      mixStaticSpecIntoComponent(Constructor, statics);\n\t    },\n\t    autobind: function() {}\n\t  };\n\t\n\t  function validateTypeDef(Constructor, typeDef, location) {\n\t    for (var propName in typeDef) {\n\t      if (typeDef.hasOwnProperty(propName)) {\n\t        // use a warning instead of an _invariant so components\n\t        // don't show up in prod but only in __DEV__\n\t        if (false) {\n\t          warning(\n\t            typeof typeDef[propName] === 'function',\n\t            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n\t              'React.PropTypes.',\n\t            Constructor.displayName || 'ReactClass',\n\t            ReactPropTypeLocationNames[location],\n\t            propName\n\t          );\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function validateMethodOverride(isAlreadyDefined, name) {\n\t    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n\t      ? ReactClassInterface[name]\n\t      : null;\n\t\n\t    // Disallow overriding of base class methods unless explicitly allowed.\n\t    if (ReactClassMixin.hasOwnProperty(name)) {\n\t      _invariant(\n\t        specPolicy === 'OVERRIDE_BASE',\n\t        'ReactClassInterface: You are attempting to override ' +\n\t          '`%s` from your class specification. Ensure that your method names ' +\n\t          'do not overlap with React methods.',\n\t        name\n\t      );\n\t    }\n\t\n\t    // Disallow defining methods more than once unless explicitly allowed.\n\t    if (isAlreadyDefined) {\n\t      _invariant(\n\t        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n\t        'ReactClassInterface: You are attempting to define ' +\n\t          '`%s` on your component more than once. This conflict may be due ' +\n\t          'to a mixin.',\n\t        name\n\t      );\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Mixin helper which handles policy validation and reserved\n\t   * specification keys when building React classes.\n\t   */\n\t  function mixSpecIntoComponent(Constructor, spec) {\n\t    if (!spec) {\n\t      if (false) {\n\t        var typeofSpec = typeof spec;\n\t        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\t\n\t        if (process.env.NODE_ENV !== 'production') {\n\t          warning(\n\t            isMixinValid,\n\t            \"%s: You're attempting to include a mixin that is either null \" +\n\t              'or not an object. Check the mixins included by the component, ' +\n\t              'as well as any mixins they include themselves. ' +\n\t              'Expected object but got %s.',\n\t            Constructor.displayName || 'ReactClass',\n\t            spec === null ? null : typeofSpec\n\t          );\n\t        }\n\t      }\n\t\n\t      return;\n\t    }\n\t\n\t    _invariant(\n\t      typeof spec !== 'function',\n\t      \"ReactClass: You're attempting to \" +\n\t        'use a component class or function as a mixin. Instead, just use a ' +\n\t        'regular object.'\n\t    );\n\t    _invariant(\n\t      !isValidElement(spec),\n\t      \"ReactClass: You're attempting to \" +\n\t        'use a component as a mixin. Instead, just use a regular object.'\n\t    );\n\t\n\t    var proto = Constructor.prototype;\n\t    var autoBindPairs = proto.__reactAutoBindPairs;\n\t\n\t    // By handling mixins before any other properties, we ensure the same\n\t    // chaining order is applied to methods with DEFINE_MANY policy, whether\n\t    // mixins are listed before or after these methods in the spec.\n\t    if (spec.hasOwnProperty(MIXINS_KEY)) {\n\t      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n\t    }\n\t\n\t    for (var name in spec) {\n\t      if (!spec.hasOwnProperty(name)) {\n\t        continue;\n\t      }\n\t\n\t      if (name === MIXINS_KEY) {\n\t        // We have already handled mixins in a special case above.\n\t        continue;\n\t      }\n\t\n\t      var property = spec[name];\n\t      var isAlreadyDefined = proto.hasOwnProperty(name);\n\t      validateMethodOverride(isAlreadyDefined, name);\n\t\n\t      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n\t        RESERVED_SPEC_KEYS[name](Constructor, property);\n\t      } else {\n\t        // Setup methods on prototype:\n\t        // The following member methods should not be automatically bound:\n\t        // 1. Expected ReactClass methods (in the \"interface\").\n\t        // 2. Overridden methods (that were mixed in).\n\t        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n\t        var isFunction = typeof property === 'function';\n\t        var shouldAutoBind =\n\t          isFunction &&\n\t          !isReactClassMethod &&\n\t          !isAlreadyDefined &&\n\t          spec.autobind !== false;\n\t\n\t        if (shouldAutoBind) {\n\t          autoBindPairs.push(name, property);\n\t          proto[name] = property;\n\t        } else {\n\t          if (isAlreadyDefined) {\n\t            var specPolicy = ReactClassInterface[name];\n\t\n\t            // These cases should already be caught by validateMethodOverride.\n\t            _invariant(\n\t              isReactClassMethod &&\n\t                (specPolicy === 'DEFINE_MANY_MERGED' ||\n\t                  specPolicy === 'DEFINE_MANY'),\n\t              'ReactClass: Unexpected spec policy %s for key %s ' +\n\t                'when mixing in component specs.',\n\t              specPolicy,\n\t              name\n\t            );\n\t\n\t            // For methods which are defined more than once, call the existing\n\t            // methods before calling the new property, merging if appropriate.\n\t            if (specPolicy === 'DEFINE_MANY_MERGED') {\n\t              proto[name] = createMergedResultFunction(proto[name], property);\n\t            } else if (specPolicy === 'DEFINE_MANY') {\n\t              proto[name] = createChainedFunction(proto[name], property);\n\t            }\n\t          } else {\n\t            proto[name] = property;\n\t            if (false) {\n\t              // Add verbose displayName to the function, which helps when looking\n\t              // at profiling tools.\n\t              if (typeof property === 'function' && spec.displayName) {\n\t                proto[name].displayName = spec.displayName + '_' + name;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  function mixStaticSpecIntoComponent(Constructor, statics) {\n\t    if (!statics) {\n\t      return;\n\t    }\n\t\n\t    for (var name in statics) {\n\t      var property = statics[name];\n\t      if (!statics.hasOwnProperty(name)) {\n\t        continue;\n\t      }\n\t\n\t      var isReserved = name in RESERVED_SPEC_KEYS;\n\t      _invariant(\n\t        !isReserved,\n\t        'ReactClass: You are attempting to define a reserved ' +\n\t          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n\t          'as an instance property instead; it will still be accessible on the ' +\n\t          'constructor.',\n\t        name\n\t      );\n\t\n\t      var isAlreadyDefined = name in Constructor;\n\t      if (isAlreadyDefined) {\n\t        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n\t          ? ReactClassStaticInterface[name]\n\t          : null;\n\t\n\t        _invariant(\n\t          specPolicy === 'DEFINE_MANY_MERGED',\n\t          'ReactClass: You are attempting to define ' +\n\t            '`%s` on your component more than once. This conflict may be ' +\n\t            'due to a mixin.',\n\t          name\n\t        );\n\t\n\t        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\t\n\t        return;\n\t      }\n\t\n\t      Constructor[name] = property;\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Merge two objects, but throw if both contain the same key.\n\t   *\n\t   * @param {object} one The first object, which is mutated.\n\t   * @param {object} two The second object\n\t   * @return {object} one after it has been mutated to contain everything in two.\n\t   */\n\t  function mergeIntoWithNoDuplicateKeys(one, two) {\n\t    _invariant(\n\t      one && two && typeof one === 'object' && typeof two === 'object',\n\t      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n\t    );\n\t\n\t    for (var key in two) {\n\t      if (two.hasOwnProperty(key)) {\n\t        _invariant(\n\t          one[key] === undefined,\n\t          'mergeIntoWithNoDuplicateKeys(): ' +\n\t            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n\t            'may be due to a mixin; in particular, this may be caused by two ' +\n\t            'getInitialState() or getDefaultProps() methods returning objects ' +\n\t            'with clashing keys.',\n\t          key\n\t        );\n\t        one[key] = two[key];\n\t      }\n\t    }\n\t    return one;\n\t  }\n\t\n\t  /**\n\t   * Creates a function that invokes two functions and merges their return values.\n\t   *\n\t   * @param {function} one Function to invoke first.\n\t   * @param {function} two Function to invoke second.\n\t   * @return {function} Function that invokes the two argument functions.\n\t   * @private\n\t   */\n\t  function createMergedResultFunction(one, two) {\n\t    return function mergedResult() {\n\t      var a = one.apply(this, arguments);\n\t      var b = two.apply(this, arguments);\n\t      if (a == null) {\n\t        return b;\n\t      } else if (b == null) {\n\t        return a;\n\t      }\n\t      var c = {};\n\t      mergeIntoWithNoDuplicateKeys(c, a);\n\t      mergeIntoWithNoDuplicateKeys(c, b);\n\t      return c;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Creates a function that invokes two functions and ignores their return vales.\n\t   *\n\t   * @param {function} one Function to invoke first.\n\t   * @param {function} two Function to invoke second.\n\t   * @return {function} Function that invokes the two argument functions.\n\t   * @private\n\t   */\n\t  function createChainedFunction(one, two) {\n\t    return function chainedFunction() {\n\t      one.apply(this, arguments);\n\t      two.apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Binds a method to the component.\n\t   *\n\t   * @param {object} component Component whose method is going to be bound.\n\t   * @param {function} method Method to be bound.\n\t   * @return {function} The bound method.\n\t   */\n\t  function bindAutoBindMethod(component, method) {\n\t    var boundMethod = method.bind(component);\n\t    if (false) {\n\t      boundMethod.__reactBoundContext = component;\n\t      boundMethod.__reactBoundMethod = method;\n\t      boundMethod.__reactBoundArguments = null;\n\t      var componentName = component.constructor.displayName;\n\t      var _bind = boundMethod.bind;\n\t      boundMethod.bind = function(newThis) {\n\t        for (\n\t          var _len = arguments.length,\n\t            args = Array(_len > 1 ? _len - 1 : 0),\n\t            _key = 1;\n\t          _key < _len;\n\t          _key++\n\t        ) {\n\t          args[_key - 1] = arguments[_key];\n\t        }\n\t\n\t        // User is trying to bind() an autobound method; we effectively will\n\t        // ignore the value of \"this\" that the user is trying to use, so\n\t        // let's warn.\n\t        if (newThis !== component && newThis !== null) {\n\t          if (process.env.NODE_ENV !== 'production') {\n\t            warning(\n\t              false,\n\t              'bind(): React component methods may only be bound to the ' +\n\t                'component instance. See %s',\n\t              componentName\n\t            );\n\t          }\n\t        } else if (!args.length) {\n\t          if (process.env.NODE_ENV !== 'production') {\n\t            warning(\n\t              false,\n\t              'bind(): You are binding a component method to the component. ' +\n\t                'React does this for you automatically in a high-performance ' +\n\t                'way, so you can safely remove this call. See %s',\n\t              componentName\n\t            );\n\t          }\n\t          return boundMethod;\n\t        }\n\t        var reboundMethod = _bind.apply(boundMethod, arguments);\n\t        reboundMethod.__reactBoundContext = component;\n\t        reboundMethod.__reactBoundMethod = method;\n\t        reboundMethod.__reactBoundArguments = args;\n\t        return reboundMethod;\n\t      };\n\t    }\n\t    return boundMethod;\n\t  }\n\t\n\t  /**\n\t   * Binds all auto-bound methods in a component.\n\t   *\n\t   * @param {object} component Component whose method is going to be bound.\n\t   */\n\t  function bindAutoBindMethods(component) {\n\t    var pairs = component.__reactAutoBindPairs;\n\t    for (var i = 0; i < pairs.length; i += 2) {\n\t      var autoBindKey = pairs[i];\n\t      var method = pairs[i + 1];\n\t      component[autoBindKey] = bindAutoBindMethod(component, method);\n\t    }\n\t  }\n\t\n\t  var IsMountedPreMixin = {\n\t    componentDidMount: function() {\n\t      this.__isMounted = true;\n\t    }\n\t  };\n\t\n\t  var IsMountedPostMixin = {\n\t    componentWillUnmount: function() {\n\t      this.__isMounted = false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Add more to the ReactClass base class. These are all legacy features and\n\t   * therefore not already part of the modern ReactComponent.\n\t   */\n\t  var ReactClassMixin = {\n\t    /**\n\t     * TODO: This will be deprecated because state should always keep a consistent\n\t     * type signature and the only use case for this, is to avoid that.\n\t     */\n\t    replaceState: function(newState, callback) {\n\t      this.updater.enqueueReplaceState(this, newState, callback);\n\t    },\n\t\n\t    /**\n\t     * Checks whether or not this composite component is mounted.\n\t     * @return {boolean} True if mounted, false otherwise.\n\t     * @protected\n\t     * @final\n\t     */\n\t    isMounted: function() {\n\t      if (false) {\n\t        warning(\n\t          this.__didWarnIsMounted,\n\t          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n\t            'subscriptions and pending requests in componentWillUnmount to ' +\n\t            'prevent memory leaks.',\n\t          (this.constructor && this.constructor.displayName) ||\n\t            this.name ||\n\t            'Component'\n\t        );\n\t        this.__didWarnIsMounted = true;\n\t      }\n\t      return !!this.__isMounted;\n\t    }\n\t  };\n\t\n\t  var ReactClassComponent = function() {};\n\t  _assign(\n\t    ReactClassComponent.prototype,\n\t    ReactComponent.prototype,\n\t    ReactClassMixin\n\t  );\n\t\n\t  /**\n\t   * Creates a composite component class given a class specification.\n\t   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n\t   *\n\t   * @param {object} spec Class specification (which must define `render`).\n\t   * @return {function} Component constructor function.\n\t   * @public\n\t   */\n\t  function createClass(spec) {\n\t    // To keep our warnings more understandable, we'll use a little hack here to\n\t    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n\t    // unnecessarily identify a class without displayName as 'Constructor'.\n\t    var Constructor = identity(function(props, context, updater) {\n\t      // This constructor gets overridden by mocks. The argument is used\n\t      // by mocks to assert on what gets mounted.\n\t\n\t      if (false) {\n\t        warning(\n\t          this instanceof Constructor,\n\t          'Something is calling a React component directly. Use a factory or ' +\n\t            'JSX instead. See: https://fb.me/react-legacyfactory'\n\t        );\n\t      }\n\t\n\t      // Wire up auto-binding\n\t      if (this.__reactAutoBindPairs.length) {\n\t        bindAutoBindMethods(this);\n\t      }\n\t\n\t      this.props = props;\n\t      this.context = context;\n\t      this.refs = emptyObject;\n\t      this.updater = updater || ReactNoopUpdateQueue;\n\t\n\t      this.state = null;\n\t\n\t      // ReactClasses doesn't have constructors. Instead, they use the\n\t      // getInitialState and componentWillMount methods for initialization.\n\t\n\t      var initialState = this.getInitialState ? this.getInitialState() : null;\n\t      if (false) {\n\t        // We allow auto-mocks to proceed as if they're returning null.\n\t        if (\n\t          initialState === undefined &&\n\t          this.getInitialState._isMockFunction\n\t        ) {\n\t          // This is probably bad practice. Consider warning here and\n\t          // deprecating this convenience.\n\t          initialState = null;\n\t        }\n\t      }\n\t      _invariant(\n\t        typeof initialState === 'object' && !Array.isArray(initialState),\n\t        '%s.getInitialState(): must return an object or null',\n\t        Constructor.displayName || 'ReactCompositeComponent'\n\t      );\n\t\n\t      this.state = initialState;\n\t    });\n\t    Constructor.prototype = new ReactClassComponent();\n\t    Constructor.prototype.constructor = Constructor;\n\t    Constructor.prototype.__reactAutoBindPairs = [];\n\t\n\t    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\t\n\t    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n\t    mixSpecIntoComponent(Constructor, spec);\n\t    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\t\n\t    // Initialize the defaultProps property after all mixins have been merged.\n\t    if (Constructor.getDefaultProps) {\n\t      Constructor.defaultProps = Constructor.getDefaultProps();\n\t    }\n\t\n\t    if (false) {\n\t      // This is a tag to indicate that the use of these method names is ok,\n\t      // since it's used with createClass. If it's not, then it's likely a\n\t      // mistake so we'll warn you to use the static property, property\n\t      // initializer or constructor respectively.\n\t      if (Constructor.getDefaultProps) {\n\t        Constructor.getDefaultProps.isReactClassApproved = {};\n\t      }\n\t      if (Constructor.prototype.getInitialState) {\n\t        Constructor.prototype.getInitialState.isReactClassApproved = {};\n\t      }\n\t    }\n\t\n\t    _invariant(\n\t      Constructor.prototype.render,\n\t      'createClass(...): Class specification must implement a `render` method.'\n\t    );\n\t\n\t    if (false) {\n\t      warning(\n\t        !Constructor.prototype.componentShouldUpdate,\n\t        '%s has a method called ' +\n\t          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n\t          'The name is phrased as a question because the function is ' +\n\t          'expected to return a value.',\n\t        spec.displayName || 'A component'\n\t      );\n\t      warning(\n\t        !Constructor.prototype.componentWillRecieveProps,\n\t        '%s has a method called ' +\n\t          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n\t        spec.displayName || 'A component'\n\t      );\n\t      warning(\n\t        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n\t        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n\t          'Did you mean UNSAFE_componentWillReceiveProps()?',\n\t        spec.displayName || 'A component'\n\t      );\n\t    }\n\t\n\t    // Reduce time spent doing lookups by setting these on the prototype.\n\t    for (var methodName in ReactClassInterface) {\n\t      if (!Constructor.prototype[methodName]) {\n\t        Constructor.prototype[methodName] = null;\n\t      }\n\t    }\n\t\n\t    return Constructor;\n\t  }\n\t\n\t  return createClass;\n\t}\n\t\n\tmodule.exports = factory;\n\n\n/***/ }),\n\n/***/ 313:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ }),\n\n/***/ 4:\n/***/ (function(module, exports) {\n\n\t/*\n\tobject-assign\n\t(c) Sindre Sorhus\n\t@license MIT\n\t*/\n\t\n\t'use strict';\n\t/* eslint-disable no-unused-vars */\n\tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\t\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\t\n\t\treturn Object(val);\n\t}\n\t\n\tfunction shouldUseNative() {\n\t\ttry {\n\t\t\tif (!Object.assign) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// Detect buggy property enumeration order in older V8 versions.\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\t\ttest1[5] = 'de';\n\t\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test2 = {};\n\t\t\tfor (var i = 0; i < 10; i++) {\n\t\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t\t}\n\t\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\t\treturn test2[n];\n\t\t\t});\n\t\t\tif (order2.join('') !== '0123456789') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test3 = {};\n\t\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\t\ttest3[letter] = letter;\n\t\t\t});\n\t\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\t\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\t\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif (getOwnPropertySymbols) {\n\t\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn to;\n\t};\n\n\n/***/ }),\n\n/***/ 200:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _react = __webpack_require__(5);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Wallets = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"../components/Wallets\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t\n\tvar _Wallets2 = _interopRequireDefault(_Wallets);\n\t\n\tvar _wallets = __webpack_require__(320);\n\t\n\tvar _wallets2 = _interopRequireDefault(_wallets);\n\t\n\tvar _immutable = __webpack_require__(313);\n\t\n\tvar _immutable2 = _interopRequireDefault(_immutable);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar list = _immutable2.default.fromJS(Object.keys(_wallets2.default).map(function (key) {\n\t  return _extends({}, _wallets2.default[key], {\n\t    name: key,\n\t    config: '' + _wallets2.default[key].basedir + _wallets2.default[key].configFile\n\t  });\n\t}));\n\t\n\tvar IndexPage = function IndexPage() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { style: { height: '100%' } },\n\t    _react2.default.createElement(\n\t      'p',\n\t      {\n\t        style: {\n\t          padding: '0px 1.0875rem 0.875rem',\n\t          paddingTop: 0\n\t        }\n\t      },\n\t      'Community maintained list of ',\n\t      _react2.default.createElement(\n\t        'strong',\n\t        null,\n\t        'wallets'\n\t      ),\n\t      ',',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'strong',\n\t        null,\n\t        'masternodes coins'\n\t      ),\n\t      ' and their respective',\n\t      ' ',\n\t      _react2.default.createElement(\n\t        'strong',\n\t        null,\n\t        'configuration'\n\t      ),\n\t      ' values.'\n\t    ),\n\t    _react2.default.createElement(_Wallets2.default, { list: list })\n\t  );\n\t};\n\t\n\texports.default = IndexPage;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 320:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"Zerocoin\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/zcoinofficial/zcoin\",\"baseBinary\":\"zcoin\",\"basedir\":\".zcoin\",\"configFile\":\"zcoin.conf\",\"mainnetPort\":8168,\"mainRpcPort\":8888,\"testnetPort\":18168,\"testnetRpcPort\":18888,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"XZC\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Dash\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/dashpay/dash\",\"baseBinary\":\"dash\",\"basedir\":\".dashcore/\",\"configFile\":\"dash.conf\",\"mainnetPort\":9999,\"mainRpcPort\":9998,\"testnetPort\":19999,\"testnetRpcPort\":19998,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"DASH\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/dashd\",\"dashpay/dashd\"]},\"PIVX\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/PIVX-Project/PIVX\",\"baseBinary\":\"pivx\",\"basedir\":\".pivx/\",\"configFile\":\"pivx.conf\",\"mainnetPort\":51472,\"mainRpcPort\":51473,\"testnetPort\":51474,\"testnetRpcPort\":51475,\"requiredTokens\":10000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"PIVX\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Sparks\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/sparkscrypto/Sparks\",\"baseBinary\":\"Sparks\",\"basedir\":\".Sparks/\",\"configFile\":\"Sparks.conf\",\"mainnetPort\":8890,\"mainRpcPort\":8892,\"testnetPort\":8891,\"testnetRpcPort\":8893,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"SPK\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/Sparksd\"]},\"Goacoin\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/goacoincore/goacoin\",\"baseBinary\":\"goacoin\",\"basedir\":\".goacoincore/\",\"configFile\":\"goacoin.conf\",\"mainnetPort\":1947,\"mainRpcPort\":1948,\"testnetPort\":2947,\"testnetRpcPort\":2948,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"GOA\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/goacoind\"]},\"Omega\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/omegacoinnetwork/omegacoin\",\"baseBinary\":\"omegacoin\",\"basedir\":\".omegacoincore/\",\"configFile\":\"omegacoin.conf\",\"mainnetPort\":7777,\"mainRpcPort\":7778,\"testnetPort\":17777,\"testnetRpcPort\":17778,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"OMEGA\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Saros\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/sarospay/saros\",\"baseBinary\":\"saros\",\"basedir\":\".saroscore/\",\"configFile\":\"saros.conf\",\"mainnetPort\":9992,\"mainRpcPort\":9891,\"testnetPort\":19992,\"testnetRpcPort\":19891,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"SAROS\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Shekel\":{\"parent\":\"PIVX\",\"walletSrc\":\"https://github.com/shekeltechnologies/wallet\",\"baseBinary\":\"shekel\",\"basedir\":\".shekel/\",\"configFile\":\"shekel.conf\",\"mainnetPort\":49472,\"mainRpcPort\":49473,\"testnetPort\":51474,\"testnetRpcPort\":51475,\"requiredTokens\":25000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"JEW\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Northern\":{\"parent\":\"PIVX\",\"walletSrc\":\"https://github.com/Northerncryptodev/Northern/\",\"baseBinary\":\"northern\",\"basedir\":\".northern/\",\"configFile\":\"northern.conf\",\"mainnetPort\":60151,\"mainRpcPort\":61150,\"testnetPort\":50151,\"testnetRpcPort\":51150,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NORT\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Vantaur\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/vantaur/vantaur\",\"baseBinary\":\"vantaur\",\"basedir\":\".Vantaur/\",\"configFile\":\"Vantaur.conf\",\"mainnetPort\":22813,\"mainRpcPort\":22812,\"testnetPort\":20114,\"testnetRpcPort\":20115,\"requiredTokens\":50000,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"VTAR\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Artax\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/Artax-Project/Artax\",\"baseBinary\":\"artax\",\"basedir\":\".Artax/\",\"configFile\":\"Artax.conf\",\"mainnetPort\":21526,\"mainRpcPort\":21527,\"testnetPort\":121526,\"testnetRpcPort\":121527,\"requiredTokens\":1000,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"ARTX\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/artaxd\"]},\"Tokugawa\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/TokugawaCoin/Tokugawa\",\"baseBinary\":\"Tokugawa\",\"basedir\":\".Tokugawa/\",\"configFile\":\"Tokugawa.conf\",\"mainnetPort\":21117,\"mainRpcPort\":21116,\"testnetPort\":20114,\"testnetRpcPort\":20115,\"requiredTokens\":2500,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"TOK\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Peercoin\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/peercoin/peercoin\",\"baseBinary\":\"peercoin\",\"basedir\":\".peercoin/\",\"configFile\":\"peercoin.conf\",\"mainnetPort\":9901,\"mainRpcPort\":9902,\"testnetPort\":9903,\"testnetRpcPort\":9904,\"requiredTokens\":\"-\",\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"PPC\",\"masternode\":false,\"proofType\":\"\",\"images\":[]},\"Novacoin\":{\"parent\":\"Peercoin\",\"walletSrc\":\"https://github.com/novacoin-project/novacoin\",\"baseBinary\":\"novacoin\",\"basedir\":\".novacoin/\",\"configFile\":\"novacoin.conf\",\"mainnetPort\":7777,\"mainRpcPort\":8344,\"testnetPort\":17777,\"testnetRpcPort\":18344,\"requiredTokens\":\"-\",\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NVC\",\"masternode\":false,\"proofType\":\"PoS/PoW\",\"images\":[]},\"Bitcoin\":{\"parent\":null,\"walletSrc\":\"https://github.com/bitcoin/bitcoin\",\"baseBinary\":\"bitcoin\",\"basedir\":\".bitcoin/\",\"configFile\":\"bitcoin.conf\",\"mainnetPort\":8333,\"mainRpcPort\":8332,\"testnetPort\":18333,\"testnetRpcPort\":18332,\"requiredTokens\":null,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NVC\",\"masternode\":false,\"proofType\":\"PoW\",\"images\":[\"kylemanna/bitcoind\"]}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-index-js-00341ec55165cd6877a0.js","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/create-react-class/factory.js\n// module id = 96\n// module chunks = 35783957827783 162898551421021 231608221292675","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/immutable/dist/immutable.js\n// module id = 313\n// module chunks = 35783957827783","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/object-assign/index.js\n// module id = 4\n// module chunks = 35783957827783 162898551421021 231608221292675","import React from 'react'\nimport Masternodes from '../components/Wallets'\nimport masternodesMap from '../../wallets.json'\nimport Immutable from 'immutable'\n\nconst list = Immutable.fromJS(\n  Object.keys(masternodesMap).map(key => ({\n    ...masternodesMap[key],\n    name: key,\n    config: `${masternodesMap[key].basedir}${masternodesMap[key].configFile}`,\n  }))\n)\n\nconst IndexPage = () => (\n  <div style={{ height: '100%' }}>\n    <p\n      style={{\n        padding: '0px 1.0875rem 0.875rem',\n        paddingTop: 0,\n      }}\n    >\n      Community maintained list of <strong>wallets</strong>,{' '}\n      <strong>masternodes coins</strong> and their respective{' '}\n      <strong>configuration</strong> values.\n    </p>\n    <Masternodes list={list} />\n  </div>\n)\n\nexport default IndexPage\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/index.js","module.exports = {\"Zerocoin\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/zcoinofficial/zcoin\",\"baseBinary\":\"zcoin\",\"basedir\":\".zcoin\",\"configFile\":\"zcoin.conf\",\"mainnetPort\":8168,\"mainRpcPort\":8888,\"testnetPort\":18168,\"testnetRpcPort\":18888,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"XZC\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Dash\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/dashpay/dash\",\"baseBinary\":\"dash\",\"basedir\":\".dashcore/\",\"configFile\":\"dash.conf\",\"mainnetPort\":9999,\"mainRpcPort\":9998,\"testnetPort\":19999,\"testnetRpcPort\":19998,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"DASH\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/dashd\",\"dashpay/dashd\"]},\"PIVX\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/PIVX-Project/PIVX\",\"baseBinary\":\"pivx\",\"basedir\":\".pivx/\",\"configFile\":\"pivx.conf\",\"mainnetPort\":51472,\"mainRpcPort\":51473,\"testnetPort\":51474,\"testnetRpcPort\":51475,\"requiredTokens\":10000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"PIVX\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Sparks\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/sparkscrypto/Sparks\",\"baseBinary\":\"Sparks\",\"basedir\":\".Sparks/\",\"configFile\":\"Sparks.conf\",\"mainnetPort\":8890,\"mainRpcPort\":8892,\"testnetPort\":8891,\"testnetRpcPort\":8893,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"SPK\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/Sparksd\"]},\"Goacoin\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/goacoincore/goacoin\",\"baseBinary\":\"goacoin\",\"basedir\":\".goacoincore/\",\"configFile\":\"goacoin.conf\",\"mainnetPort\":1947,\"mainRpcPort\":1948,\"testnetPort\":2947,\"testnetRpcPort\":2948,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"GOA\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/goacoind\"]},\"Omega\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/omegacoinnetwork/omegacoin\",\"baseBinary\":\"omegacoin\",\"basedir\":\".omegacoincore/\",\"configFile\":\"omegacoin.conf\",\"mainnetPort\":7777,\"mainRpcPort\":7778,\"testnetPort\":17777,\"testnetRpcPort\":17778,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"OMEGA\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Saros\":{\"parent\":\"Dash\",\"walletSrc\":\"https://github.com/sarospay/saros\",\"baseBinary\":\"saros\",\"basedir\":\".saroscore/\",\"configFile\":\"saros.conf\",\"mainnetPort\":9992,\"mainRpcPort\":9891,\"testnetPort\":19992,\"testnetRpcPort\":19891,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"SAROS\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Shekel\":{\"parent\":\"PIVX\",\"walletSrc\":\"https://github.com/shekeltechnologies/wallet\",\"baseBinary\":\"shekel\",\"basedir\":\".shekel/\",\"configFile\":\"shekel.conf\",\"mainnetPort\":49472,\"mainRpcPort\":49473,\"testnetPort\":51474,\"testnetRpcPort\":51475,\"requiredTokens\":25000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"JEW\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Northern\":{\"parent\":\"PIVX\",\"walletSrc\":\"https://github.com/Northerncryptodev/Northern/\",\"baseBinary\":\"northern\",\"basedir\":\".northern/\",\"configFile\":\"northern.conf\",\"mainnetPort\":60151,\"mainRpcPort\":61150,\"testnetPort\":50151,\"testnetRpcPort\":51150,\"requiredTokens\":1000,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NORT\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Vantaur\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/vantaur/vantaur\",\"baseBinary\":\"vantaur\",\"basedir\":\".Vantaur/\",\"configFile\":\"Vantaur.conf\",\"mainnetPort\":22813,\"mainRpcPort\":22812,\"testnetPort\":20114,\"testnetRpcPort\":20115,\"requiredTokens\":50000,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"VTAR\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Artax\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/Artax-Project/Artax\",\"baseBinary\":\"artax\",\"basedir\":\".Artax/\",\"configFile\":\"Artax.conf\",\"mainnetPort\":21526,\"mainRpcPort\":21527,\"testnetPort\":121526,\"testnetRpcPort\":121527,\"requiredTokens\":1000,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"ARTX\",\"masternode\":true,\"proofType\":\"\",\"images\":[\"lepetitbloc/artaxd\"]},\"Tokugawa\":{\"parent\":\"Novacoin\",\"walletSrc\":\"https://github.com/TokugawaCoin/Tokugawa\",\"baseBinary\":\"Tokugawa\",\"basedir\":\".Tokugawa/\",\"configFile\":\"Tokugawa.conf\",\"mainnetPort\":21117,\"mainRpcPort\":21116,\"testnetPort\":20114,\"testnetRpcPort\":20115,\"requiredTokens\":2500,\"bdbVersion\":\"5.3.28.NC\",\"symbol\":\"TOK\",\"masternode\":true,\"proofType\":\"\",\"images\":[]},\"Peercoin\":{\"parent\":\"Bitcoin\",\"walletSrc\":\"https://github.com/peercoin/peercoin\",\"baseBinary\":\"peercoin\",\"basedir\":\".peercoin/\",\"configFile\":\"peercoin.conf\",\"mainnetPort\":9901,\"mainRpcPort\":9902,\"testnetPort\":9903,\"testnetRpcPort\":9904,\"requiredTokens\":\"-\",\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"PPC\",\"masternode\":false,\"proofType\":\"\",\"images\":[]},\"Novacoin\":{\"parent\":\"Peercoin\",\"walletSrc\":\"https://github.com/novacoin-project/novacoin\",\"baseBinary\":\"novacoin\",\"basedir\":\".novacoin/\",\"configFile\":\"novacoin.conf\",\"mainnetPort\":7777,\"mainRpcPort\":8344,\"testnetPort\":17777,\"testnetRpcPort\":18344,\"requiredTokens\":\"-\",\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NVC\",\"masternode\":false,\"proofType\":\"PoS/PoW\",\"images\":[]},\"Bitcoin\":{\"parent\":null,\"walletSrc\":\"https://github.com/bitcoin/bitcoin\",\"baseBinary\":\"bitcoin\",\"basedir\":\".bitcoin/\",\"configFile\":\"bitcoin.conf\",\"mainnetPort\":8333,\"mainRpcPort\":8332,\"testnetPort\":18333,\"testnetRpcPort\":18332,\"requiredTokens\":null,\"bdbVersion\":\"4.8.30.NC\",\"symbol\":\"NVC\",\"masternode\":false,\"proofType\":\"PoW\",\"images\":[\"kylemanna/bitcoind\"]}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wallets.json\n// module id = 320\n// module chunks = 35783957827783"],"sourceRoot":""}